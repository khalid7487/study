***Node js working flow:
1. Javascript code we write
2. Node Javascript side (lib folder in Node repo)
3. process.binding() (connects js and c++ functions)
4.  Node's C++  side (50 % c++)
5. v8 engine (converts values between js and C++ world)(70% c++)
6. libUV(100% C++)

*** pbkdf2 Function*****
(password, salt , other options)----------> Pbkdf2 function -------> hash

Note: pbkdf2 is a c++ library which is used in cripto library.

**** Node program Run *****
Node program usually run into one thread in Event Loop .

*****Event Loop****


const pendingTimers = [];
const pendingOSTasks = [];
const pendingOperations = [];

    // Check one: Any pending setTimeout, setInterval, setImmediate?
   // Check two: Any pending OS tasks? (Like server listening to port)
   // Check three: Any pending long running operations?(Like fs module)


function shouldContinue(){
    // 1) Node look at pendingTimers and sees if any functions
    // are ready to be called . setTimeout, setInterval

    // 2) Node looks at pendingOSTasks and pendingOperations and 
    // calls relevant callbacks

    // 3) pause execution. continue when...
    //  - a new pendingOSTasks is done 
    //  - a new pendingOperations is done
    //  - a timer is about to complete

    // 4) look at pendingTimers. call any setImmediate.


    return pendingTimers.length || pendingOSTasks.length || pendingOperations.length 
}

while(shouldContinue()){
    return pendingTimers.length || pendingOSTasks.length || pendingOperations.length
}

***Is Node single Thread? ***********
node js is not really single thread because it run into libuv which is C++ library
and C++ run 4 thread .so node js is 4 thread. so node js have 4 thread.

*** how to increase threadpool size******

process.env.UV_THREADPOOL_SIZE = 5

**important note ****
https request direct handle operating system that's there in no blocking of our Javascript code inside.
https use underline operating system

-----------
fs module read data from HDD for example: 
if 1st thread is fs and request something from Hird drive it is a big pause where higer piroty comes to play 
and fs go to wating queue and execute higer piroty 1st.


------------------2nd Section (Enhancing Performance)-----------------

***improving node Performance*****
1. Recommmended (Use Node in 'Cluster' Mode)
2. Use worker Threads (Experimental)

*** Cluster Theory****

                       |-------> single thread (Node server)
                       |
Cluster Manager -------|------> single thread (Node server)
                       |
                       |
                       |------> single thread (Node server)


                Run node index.js
                        |
                        |      ------------>worker instance
                    index.js   <-----------
                        |                 |
                        |                 |
                    Cluster Manager       |
                        |                 |
                        |                 |
                        Cluster.fork()----


The very first time it's going to produce our Cluster Manager and then every
time after that it's going to worker instance.

*Question:- 1 -> Clear the concept with krishan udaharon about queque

***************Benchmarking server Performance**************
command: ab -c 50 -n 500 localhost:3000/fast

here: -n 500( total 500 request)  and -c 50 (total concurrency) that's mean 50 request at same time

------------------------------example: index.js-------
(with 2 Cluster we got better Performance then 6 Cluster where our cores is 4)

Important Note: By increasing the number of children that you have inside your application dramatically beyond the number of actual
logical cores that you have are physical CPU cores that you have in your computer you're going to have a negative effect on the Performance of your system.
so we can say clustring is great but you have to used it in good way.

******************************PM2************

pm2 is package wich is create cluster by default

---------command
1.start cmd:-
pm2 start index.js -i 0 (here , 0 means i don't 
what is my cores just figure out what to do for me in
that case and pm2 automaticall dected thread of my computer and create same ammount of thread)

2.kill cmd:-
pm2 delete index

3. pm2 list (that's show our cluster)
4. pm2 show (that's show our instance)




 